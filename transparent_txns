#!/usr/bin/perl
#
# MIT License (ChileBob)
#
# Zcash : zs1a7qnkg8hr74ujj08jhjcdfs7s62yathqlyn5vd2e8ww96ln28m3t2jkxun5fp7hxjntcg8ccuvs
# Ycash : ys17fsj64ydl93net807xr00ujz2lnrf22cjf4430vvz69vpaat8t3hrdjmkvj7thrw4fdaz7l0pns

use Data::Dumper;
use JSON;

my %richlist;										# transparent address & balance

my $node_client = 'ycash-cli';								# ycash client

my $block_height = 0;									# start block

my $blockchaininfo = node_cli('getblockchaininfo');

while ( $block_height < 1000) {
       
	my $block = node_cli("getblock $block_height 2");

	foreach my $tx ( @{$block->{'tx'} } ) {

		if ($tx->{'vin'}[0]->{'coinbase'}) {					# coinbase

			foreach my $vout (@{$tx->{'vout'}}) {

				my $address = $vout->{'scriptPubKey'}->{'addresses'}[0];

				$richlist{$address} += $vout->{'value'};		# update balance

			}
		}
		else {									# non coinbase

			foreach my $vin (@{$tx->{'vin'}}) {				# transparent inputs

				if ($vin->{'txid'} ) {					# input is from different txn

					my ($address, $value) = get_output($vin->{'txid'}, $vin->{'vout'});

					$richlist{$address} -= $value;		# update balance
				}
			}

			foreach my $vout (@{$tx->{'vout'}}) {				# transparent outputs

				my $address = $vout->{'scriptPubKey'}->{'addresses'}[0];

				$richlist{$address} += $vout->{'value'};		# update balance
			}
		}
	}

	$block_height++;
}

foreach my $addr (sort {$richlist{$b} <=> $richlist{$a}} keys %richlist) {		# print the richlist

	if ($richlist{$addr} > 0) {							# ignore empty accounts

		print "$addr\t$richlist{$addr}\n";

	}
}

exit;


# Safely parse JSON string
#
sub read_json {

        my ($raw) = @_;

        eval { decode_json($raw) };							# eval first, bad JSON kills puppies

        if (!$@) {                             					
                return(decode_json($raw));
        }
}


# query node client, return JSON 
#
sub node_cli {

	my ($command, $data) = @_;

	my $response = `$node_client $command $data 2>/dev/null`;			# every time you use backticks a puppy dies :-(

	my $json = read_json($response);						# bad JSON kills puppies too

	if ($json) {
		return($json);
	}
}


# return address & value of a transparent output
#
sub get_output {

	my ($txid, $output) = @_;

	my $txn_raw = `$node_client getrawtransaction $txid`;				# not a JSON response, raw hexstring
	my $txn_decoded = node_cli("decoderawtransaction $txn_raw");			# decode hexstring transaction

	return ($txn_decoded->{'vout'}[$output]->{'scriptPubKey'}->{'addresses'}[0], $txn_decoded->{'vout'}[$output]->{'value'});
}

